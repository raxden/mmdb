# This is a basic workflow to help you get started with Actions

name: Continuous Integration

# Workflow events: Controls when the action will run.
# More info: https://docs.github.com/en/actions/reference/events-that-trigger-workflows
on:
  # Triggers the workflow on pull request events but only for the master branch
  create:
    branches:
      - 'release/**'
  push:
    branches:
      - master
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - '*'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Enable debug for the `gradle-build-action` cache operations
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  info:
    name: Workflow Information
    runs-on: ubuntu-latest

    steps:
      - name: Basic Information
        run: |
          echo "The job was automatically triggered by a ${{ github.event_name }} event with ${{ github.event.action }} action."
          echo "This job is now running on a ${{ runner.os }} server hosted by GitHub!"
          echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
          echo "  "
          echo "github.ref = ${{ github.ref }}"
          echo "github.sha = ${{ github.sha }}"
          echo "  "

  checkstyle:
    name: Check code (detekt)
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup machine
        uses: ./.github/actions/common_setup

      - name: Check code via Detekt
        uses: gradle/gradle-build-action@v2
        with:
          arguments: detekt --stacktrace --scan

  assemble:
    needs: [ checkstyle ]
    if: success()
    name: Assemble apk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        buildType: [ "Debug", "Release" ]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup machine
        uses: ./.github/actions/common_setup

      - name: Decode secret files
        id: decode_secret_files
        if: ${{ matrix.buildType=='Release' }}
        uses: timheuer/base64-to-file@v1.2
        with:
          fileName: 'signing.tar.gz'
          fileDir: './config/'
          encodedString: ${{ secrets.RELEASE_FILES }}

      - name: Extract secret files
        if: ${{ matrix.buildType=='Release' }}
        run:  |
          tar xf ${{ steps.decode_secret_files.outputs.filePath }} --directory ./config

      - name: Assemble apk
        uses: gradle/gradle-build-action@v2
        with:
          arguments: assemble${{ matrix.buildType }} --stacktrace --scan

      - uses: actions/upload-artifact@v3
        with:
          name: assembled-builds
          path: |
            app/build/outputs/apk/

  test:
    needs: [ checkstyle ]
    if: success()
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup machine
        uses: ./.github/actions/common_setup

      - name: Unit tests
        uses: gradle/gradle-build-action@v2
        with:
          arguments: testDebugUnitTest --stacktrace --scan

      - name: Jacoco Reports :${{ matrix.module }}
        uses: gradle/gradle-build-action@v2
        with:
          arguments: jacocoTestReportDebug --stacktrace --scan

      - name: Uploading reports to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        uses: codecov/codecov-action@v1

  instrumental-test:
    needs: [ checkstyle ]
    if: success()
    name: Run Android Instrumental Tests
    runs-on: macOS-latest # enables hardware acceleration in the virtual machine
    timeout-minutes: 30
    strategy:
      matrix:
        api-level: [ 29 ]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Setup machine
        uses: ./.github/actions/common_setup

      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true' && steps.changed-files-specific_library_module.outputs.any_changed == 'true'
        uses: reactivecircus/android-emulator-runner@v2  # https://github.com/ReactiveCircus/android-emulator-runner
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Run instrumental tests
        if: steps.changed-files-specific_library_module.outputs.any_changed == 'true'
        uses: reactivecircus/android-emulator-runner@v2 # https://github.com/ReactiveCircus/android-emulator-runner
        with:
          api-level: ${{ matrix.api-level }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            ./gradlew connectedAndroidTest --stacktrace --scan

#  deploy-firebase:
#    name: Build & Upload to Firebase App Distribution
#    if: github.event.pull_request.base.ref == 'master' || startsWith(github.ref, 'refs/heads/release/')
#    runs-on: ubuntu-latest
#
#    needs: test
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#          submodules: 'true'
#          token: ${{ secrets.RELEASE_HUB_SECRET }}
#
#      - name: Setup machine
#        uses: ./.github/actions/common_setup
#
#      - name: Recover build files
#        uses: ./.github/actions/recover_builds
#
#      - name: Deploy in Firebase App Distribution
#        env:
#          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#        run: bash ./gradlew appDistributionUploadRelease --stacktrace

#  deploy-playstore:
#    name: Build & Upload to Playstore
#    if: startsWith(github.ref, 'refs/tags/')
#    runs-on: ubuntu-latest
#
#    needs: test
#
#    steps:
#      - name: Check out code
#        uses: actions/checkout@v2
#
#      - uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '11'
#          cache: 'gradle'
#
#      - name: Publish
#        env:
#          ANDROID_PUBLISHER_CREDENTIALS: ${{ secrets.ANDROID_PUBLISHER_CREDENTIALS }}
#        run: bash ./gradlew publishBundle --stacktrace
